
What's Happening in the Background ?
lets explore some Spring Boot Magic : Enable Debug Logging
 - Warning : Log change frequently

 application.properties
 logging.level.org.springframework=debug
#logging.level.org.springframework=info

1. How are our requests handled :
  - DispatcherServlet - Front Controller pattern
     - Mapping Servlets : dispatcherServlet urls = [/]
     - Auto Configuration ( DispatcherServletAutoConfiguration )

2. How does HelloWorldBean object get converted to JSON?
	- @ResponseBody + JacksonHttpMessageConverters
		- Auto Configuration ( JacksonHttpMessageConvertersConfiguration )

3. Who is configuring error mapping ?
  - Auto Configuration ( ErrorMvcAutoconfiguration )

4. How are all jars available ( Spring, Spring MVC, Jackson, Tomcat ) ?
 - Starter Projects - Spring Boot Starter Web ( spring-webmvc, spring-web, 
 	spring-boot-starter-tomcat, spring-boot-starter-json )


Request Methods for REST api
- GET - Retrieve details of a resource
- POST - Create a new resource
- PUT - Update an existing resource
- PATCH - Update part of a resource
- DELETE - Delete a resource

Social Media Application - Resources & Methods

- Users REST API
  - Retrieve all Users
      - GET /users
  - Create a User
      - POST /users
  - Retrieve one User
      - GET /users/{id} -> /users/1
  - Delete a user
      - DELETE /users/{id} -> /users/1
- Posts REST API
  - Retrieve all posts for a user
    - GET /users/{id}/posts
  - Create a post for a User
    - POST /users/{id}/posts
  - Retrieve details of a post
    - GET /users/{id}/posts/{post_id}


PLURALS
--------
/users
/users/1
/users/1/posts
/users/1/posts/2

WITHOUT PLURALS
------------
/user
/user/1
/user/1/post
/user/1/post/2

Note : PLURALA are more easy to understand. But both type of namings used in Industry

Response Status for REST API
- Return the correct response status
  - Resource is not found => 404
  - Server exception => 500
  - Validation error => 400

- Important Response Statused
  - 200 - success
  - 201 - created
  - 204 - no content
  - 401 - Unauthorized ( when authorization fails )
  - 400 - Bad Request ( such as validation error )
  - 404 - Resource not found
  - 500 - Server Error


ResponseEntityExceptionHandler
  - handles all the exception generated in spring



    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>


Advance REST API Features
1. Documentation
2. Content Negotiation
3. Internationalization - i18n
4. Versioning
5. HATEOAS
6. static filtering
7. Monitoring


REST API Documentation
- Your REST API consumers need to understand your REST API :
    - Resources
    - Actions
    - Request/Response Structure ( constraints/Validations )

- Challenges :
  - Accuracy : how do you ensure that your documentation is upto date and correct ?
  - consistency : You might have 100s of REST api in an enterprise. How do you ensure consistency ?

- Options : 
  1. Manually maintain documentation
  2. Generate from code

REST API Documentation - 1. Swagger and 2.Open API

- 2011 : swagger specification and swagger tools were introduced
- 2016 : Open API Specification created based on Swagger Spec
          - Swagger tools ( ex: swagger UI continue to exist )

- OpenAPI Specification : Standard Language-agnostic interface
    - Discover and understand REST API
    - Earlier called Swagger Specification

- Swagger UI : Visualize and interact with your REST API

springdoc-openapi java library helps to automate the generation of API documentation for spring boot projects.

REMEMBER : Please use <version>2.0.0</version> for springdoc-openapi-starter-webmvc-ui.
- this supports spring boot 3.0 



<dependency>
  <groupId>org.springdoc</groupId>
  <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
  <version>2.0.0</version>
</dependency>


Content Negotiation :
-------------------------
- Same Resource - Same URI
  - However Different representations are possible
        - Example: Different Content Type - XML or JSON or...
        - Example: Different Language - English or Dutch or..

- How can a consumer tell the REST API provider what they want ?
    - Content Negotiation

- Example: Accept header ( MIME types - application/xml, application/json,...)
- Example: Accept-Language header ( en, nl, fr, ...)

<dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-xml</artifactId>
    </dependency>

and then pass in header Accept value as application/xml for xml
pass in header Accept value as application/json for json

Internationalization - i18n : 
-----------------------------
- Your REST API might have consumers from around the world
- How do you customize it to users around the world ?
    - Internationalization - i18n

- Typically HTTP Request Header - Accept-Language is used
  - Accept-Language - indicates natural language and locale that the consumers prefers
  - Example: en - English 
  - Example: nl - Dutch 
  - Example: fr - French


  Versioning REST API :
  ------------------------------
  - You have built an amazing REST API
    - You have 100s of consumers
    - You need to implement a breaking change
        - Example: Split name into firstName and lastName

  - Solution : Versioning REST API
    - Variety of options
        - URL
        - Request Parameter
        - Header
        - Media Type

URI Versioning

V1: http://localhost:8080/v1/person
@GetMapping("/v1/person")
V2: http://localhost:8080/v2/person
@GetMapping("/v2/person")
Request Param Versioning

V1: http://localhost:8080/person?version=1
@GetMapping(path = "/person", params = "version=1")
V2: http://localhost:8080/person?version=2
@GetMapping(path = "/person", params = "version=2")
Header Versioning

V1: http://localhost:8080/person/header
HEADER - X-API-VERSION:1
@GetMapping(path = "/person/header", headers = "X-API-VERSION=1")
V2: http://localhost:8080/person/header
HEADER - X-API-VERSION:2
@GetMapping(path = "/person/header", headers = "X-API-VERSION=2")
Content Negotiation Versioning

V1: http://localhost:8080/person/accept
HEADER - Accept:application/vnd.company.app-v1+json
@GetMapping(path = "/person/accept", produces = "application/vnd.company.app-v1+json")
V2: http://localhost:8080/person/accept
HEADER - Accept:application/vnd.company.app-v1+json
@GetMapping(path = "/person/accept", produces = "application/vnd.company.app-v2+json")
V1 Response

{
  "name": "Bob Charlie"
}
V2 Response

{
  "name": {
    "firstName": "Bob",
    "lastName": "Charlie"
  }
}
More About Versioning
https://www.mnot.net/blog/2011/10/25/web_api_versioning_smackdown
http://urthen.github.io/2013/05/09/ways-to-version-your-api/
http://stackoverflow.com/questions/389169/best-practices-for-api-versioning
http://www.lexicalscope.com/blog/2012/03/12/how-are-rest-apis-versioned/
https://www.3scale.net/2016/06/api-versioning-methods-a-brief-reference/

Factors to Consider :
- URI Pollution
- Misuse of HTTP headers
- Caching
- Can we execute the request on the browser
- API Documentation

Best practises :
- think about vesioning even before you need it
- One Enterprise - One Vesioning approach


HATEOAS :
--------------------
- Hypermedia as th Engine of Application State (HATEOAS)
- Websites allow you to : 
  - see Data and Perform Actions ( using links )
- How about enhancing your REST API to tell consumers 
    how to perform subsequent actions ?
     - HATEOAS

- Implementation Options :
  - 1. Custom Format and implementation
        - Difficult to maintain
  - 2. Use Standard Implementation
        - HAL ( JSON Hypertext Application Language ): Simple format that gives a
          consistent and easy way to hyperlink between resources in your API

        - Spring HATEOAS : Generate HAL responses with hyperlinks to resources


        <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-hateoas</artifactId>
    </dependency>



Customizing REST API Responses - Filtering and more..
-------------------------------------------------
- Serialization: convert object to stream ( eample: JSON )
  - Most popular JSON Serialization IN JAVA : Jackson
- How about customizing the REST API response returned by 
  Jackson framework ?

1. Customize field names in response
    - @JSONProperty
2. Return only selected fields
    - Filtering
    - Example: Filter out passwords
    - Two Types: 
        - Static Filtering: Same filtering for a bean across different REST API
            - @JsonIgnoreProperties, @JsonIgnore
        - Dynamic Filtering: Customize filtering for a bean for specific REST API
            - @JsonFilter with FilterProvider


import com.fasterxml.jackson.annotation.JsonProperty;
  
  @Size(min=2, message = "Name should have atleast 2 characters")
  @JsonProperty("user_name")
  private String name;
  
  @Past(message = "Birth Date should be in the past")
  @JsonProperty("birth_date")
  private LocalDate birthDate;


Get Production-ready with Spring Boot Actuator
-----------------------------------------------
- Spring Boot actuator: Provides Spring Boot's productin ready features
    - Monitor and manage your application in your production

- Spring boot Starter Actuator: Starter to add Spring Boot actuator to your application
    - spring-boot-starter-actuator

- Provides a number of endpoints :
  - beans - complete list of spring beans in your app
  - health - Application health information
  - metrics - application metrics
  - mappings - details around request mappings

  <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

default end point :
    http://localhost:8080/actuator

management.endpoints.web.exposure.include=*
 => this exposes all the APIs. [ changes in application.properties ]


Explore REST API using HAL Explorer
----------------------------------------
1. : HAL ( JSON Hypertext Application Language )
      - Simple format that gives a consistent and easy way to heperlink between
          resources in your API
2. : HAL Explorer
      - An API explorer for RESTful Hepermedia APIs using HAL 
      - Enable your non-technical teams to play with APIs

3. : Spring Boot HAL Explorer
      - Auto-configures HAL Explorer for Spring Boot Projects
      - spring-data-rest-hal-explorer

    <dependency>
      <groupId>org.springframework.data</groupId>
      <artifactId>spring-data-rest-hal-explorer</artifactId>
    </dependency>

default end point of spring HAL Explorer :
http://localhost:8080/

=========================
Enabling H2-Console
In the next step, we use H2 as the database. Please add the following setting to enable H2-Console:

/src/main/resources/application.properties

spring.h2.console.enabled=true

===============================

Hibernate: drop table if exists post cascade 
Hibernate: drop table if exists user_details cascade 
Hibernate: drop sequence if exists post_seq
Hibernate: drop sequence if exists user_details_seq
Hibernate: create sequence post_seq start with 1 increment by 50
Hibernate: create sequence user_details_seq start with 1 increment by 50
Hibernate: create table post (id integer not null, description varchar(255), user_id integer, primary key (id))
Hibernate: create table user_details (id integer not null, birth_date date, name varchar(255), primary key (id))
Hibernate: alter table if exists post add constraint FKa3biitl48c71riii9uyelpdhb foreign key (user_id) references user_details

================================

54 Step 34z - OPTIONAL - Installing Docker 

https://docs.docker.com/engine/install/

docker --version

Launch MySQL as Docker Container
docker run --detach --env MYSQL_ROOT_PASSWORD=dummypassword --env MYSQL_USER=social-media-user --env MYSQL_PASSWORD=dummypassword --env MYSQL_DATABASE=social-media-database --name mysql --publish 3306:3306 mysql:8-oracle

docker run --detach 
--env MYSQL_ROOT_PASSWORD=dummypassword 
--env MYSQL_USER=social-media-user 
--env MYSQL_PASSWORD=dummypassword 
--env MYSQL_DATABASE=social-media-database 
--name mysql 
--publish 3306:3306 
mysql:8-oracle


docker container ls   -> list all the docker containers running in system

 
#auto update the schema of tables on startup based on entities 
spring.jpa.hibernate.ddl-auto=update


#spring.datasource.url=jdbc:h2:mem:testdb
spring.jpa.show-sql=true
spring.datasource.url=jdbc:mysql://localhost:3306/social-media-database
spring.datasource.username=social-media-user
spring.datasource.password=dummypassword
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

=======================================
spring security :

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

default credentials :
username - user
password - password generated in spring boot start up log


note - for api pass them in header as authorixzation ( user and password )

/src/main/resources/application.properties -> this is for fixing the passord and user name so that it does not changes everytime the system starts
spring.security.user.name=username
spring.security.user.password=password

spring secutity

Filter Chains
1. All requests should be authenticated
2. if a request is not authenticated then login web page is shown
3. CSRF -> POST, PUT

Configuration 
Bean FilterChain


reference :
https://github.com/in28minutes/spring-microservices-v2/blob/main/02.restful-web-services/01-step-by-step-changes/v2.md#step-12


